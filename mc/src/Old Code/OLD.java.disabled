import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.awt.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.sound.midi.SysexMessage;
import javax.swing.JFrame;
import javax.swing.JLabel;
public class App2 {
    public static String json;
    public static int countUp = 1;
    public static String startIP;
    public static int startPort;
    private static AtomicInteger counter = new AtomicInteger(-1);
    public static int limit = 1;
    public static long start = System.nanoTime();
    public static String timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm").format(new Date());
    public static PrintWriter writer;
    public static String[] jsonTexts;
    public static ByteArrayOutputStream saveToList = new ByteArrayOutputStream();
    public static PrintStream modifiedPS = new PrintStream(saveToList);
    public static PrintStream normalPS = System.out;
    public static JFrame window = new JFrame("JFrame with text"); 
    public static JLabel textFrame = new JLabel("Starting");
    public static String mcServerInfo(String inputJson) {
        Matcher m = Pattern.compile(":\\{\"name\":\"([^)]+)\",\"p").matcher(json);
        String output = "";
        while(m.find()) {
        output = ("Version: "+m.group(1));  }
        if (!json.contains("\"sample\":[{")) {
        m = Pattern.compile(",\"online\":([^)]+)},\"ver").matcher(json);
        while(m.find()) {
        output = (output+" Online: "+m.group(1));  }
        } else {
        m = Pattern.compile(",\"online\":([^)]+),\"sample").matcher(json);
        while(m.find()) {
        output = (output+" Online: "+m.group(1));  } }
        m = Pattern.compile(":\\{\"max\":([^)]+),\"online").matcher(json);
        while(m.find()) {
        output = (output+"/"+m.group(1));  } 
        return output;
    }
    public static void mcHandShake(String inputIp, int inputPort) {
        boolean open = true;
        try {
            internalMCHandShake(inputIp, inputPort);
        } catch (IOException e) {
            open = false;
        } 
        //System.out.println(inputIp+":"+inputPort+" Is Offline!");
        if (open == false) writer.println(inputIp+":"+inputPort+" is Offine!");
        if (open == true) {
            //System.out.println(inputIp+":"+inputPort+" Is Online!");
            writer.println(inputIp+":"+inputPort+" is Online!");
            
        }
        countUp++;
            //System.out.println("Querying Server... "+(countUp-1)+"/"+limit);
            textFrame.setText("Working: "+(countUp-1)+"/"+limit);
            
            //System.out.println();
            if (countUp == limit || countUp == limit + 1) { // || countUp == limit + 1
                long total = (System.nanoTime() - start) / 1000000;
                System.out.flush();
                System.setOut(normalPS);
                textFrame.setText("Done! "+(countUp-1)+"/"+limit);
                String[] result = saveToList.toString().split("NEWLINE");
                //System.out.println("Here: " + saveToList.toString());
                for (int i = 0; i < result.length;i++) {
                Matcher m = Pattern.compile(":\\{\"name\":\"([^)]+)\",\"p").matcher(result[i]);
                String output = "";
                while(m.find()) {
               output = ("Version: "+m.group(1));  }
              if (result[i].contains(",\"sample\":[{\"id\":\"") == false) {
              m = Pattern.compile(",\"online\":([^)]+)},\"ver").matcher(result[i]);
              while(m.find()) {
              output = (output+" Online: "+m.group(1));  }
               } else {
               m = Pattern.compile(",\"online\":([^)]+),\"sample\":[{\"id\":\"").matcher(result[i]);
              while(m.find()) {
              output = (output+" Onl(o)51.81.23.93:25567ine: "+m.group(1));  } }
              m = Pattern.compile(":\\{\"max\":([^)]+),\"online").matcher(result[i]);
              while(m.find()) {
              output = (output+"/"+m.group(1));  }
              textFrame.setText("Done! "+(countUp-1)+"/"+limit);
              System.out.println(output);}
              System.out.println("total time: " + total);
              writer.close();
              System.out.println("Created Log file \"Output Log "+timeStamp+"\"");
            }}
    public static void internalMCHandShake(String inputIp, int inputPort) throws IOException {
        String address = inputIp;
        int port = inputPort;
    
        InetSocketAddress host = new InetSocketAddress(address, port);
        Socket socket = new Socket();
        //System.out.println("Connecting...");
        socket.connect(host, 3000);
       // System.out.println("Done!");
       // System.out.println("Making streams...");
        DataOutputStream output = new DataOutputStream(socket.getOutputStream());
        DataInputStream input = new DataInputStream(socket.getInputStream());
    
       // System.out.println("Done!");
       // System.out.println("Attempting handshake... "+host.getAddress().toString());
    
    
        byte [] handshakeMessage = createHandshakeMessage(address, port);
    
        // C->S : Handshake State=1
        // send packet length and packet
        writeVarInt(output, handshakeMessage.length);
        output.write(handshakeMessage);
    
        // C->S : Request
        output.writeByte(0x01); //size is only 1
        output.writeByte(0x00); //packet id for ping
    
    
        // S->C : Response
        int size = readVarInt(input);
        int packetId = readVarInt(input);
    
        if (packetId == -1) {
            throw new IOException("Premature end of stream.");
        }
    
        if (packetId != 0x00) { //we want a status response
            throw new IOException("Invalid packetID");
        }
        int length = readVarInt(input); //length of json string
    
        if (length == -1) {
            throw new IOException("Premature end of stream.");
        }
    
        if (length == 0) {
            throw new IOException("Invalid string length.");
        }
    
        byte[] in = new byte[length];
        input.readFully(in);  //read json string
        json = new String(in);
        System.out.println("NEWLINE"+json);
    
    
        // C->S : Ping
        long now = System.currentTimeMillis();
        output.writeByte(0x09); //size of packet
        output.writeByte(0x01); //0x01 for ping
        output.writeLong(now); //time!?
    
        // S->C : Pong
        readVarInt(input);
        packetId = readVarInt(input);
        if (packetId == -1) {
            throw new IOException("Premature end of stream.");
        }
    
        if (packetId != 0x01) {
            throw new IOException("Invalid packetID");
            
            
        }
        long pingtime = input.readLong(); //read response
    
    
        // print out server info
        //System.out.println(json);
    
        //System.out.println("Done!");
        socket.close();
    }
    public static void main(String [] args) throws InterruptedException, FileNotFoundException, UnsupportedEncodingException{
        System.out.println("Starting Process!");
        System.out.println("Enter Server IP!");
        Scanner scanner = new Scanner(System. in);
        writer = new PrintWriter("Output Log "+timeStamp, "UTF-8");
        startIP = scanner.nextLine();
        if (startIP.contains(":")) {
           startPort = Integer.parseInt(startIP.substring(startIP.lastIndexOf(":") + 1));
           startIP = startIP.replaceAll(":"+startPort,"");
        }else {
           System.out.println("Enter the Port to Start on!");
           startPort = scanner.nextInt(); }
        System.out.println("How many Servers to Scan?");
        limit = scanner. nextInt();
        scanner.close();
        System.setOut(modifiedPS);
        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        window.setLayout(new BorderLayout());
        window.add(textFrame, BorderLayout.CENTER);
        window.pack();
        window.setVisible(true);
        window.setLocationRelativeTo(null);
        final CountDownLatch latch = new CountDownLatch(3);
        start = System.nanoTime();
        ExecutorService es = Executors.newCachedThreadPool();
        Runnable runnable = new Runnable() {
            public void run() {
               //synchronized (es) {
                mcHandShake(startIP, (startPort + counter.incrementAndGet()));
                //System.out.println(new Date());
                //System.out.println(counter);
                latch.countDown();
            }
        };
        for (double i = 0.0; i < limit; i++) {
            if (i % 100 == 0) {
                 sleep(1);}
                 //System.out.println("Pause Complete!");
                 es.submit(runnable);    
                 }
        
        latch.await(); // waits only latch.countDown() has been called 2 times.
        // 1 nanoseconds is equal to 1/1000000000 of a second.
        
        //System.out.println("total time: " + total);
        //System.out.println("B4 Shutdown");
        es.shutdown();
        //System.out.println("Limit = "+limit+" CountUp = "+countUp);
        //for (int i = 0; i < limit; i++) {
            //mcHandShake(startIP, (startPort + i));
       // }
    }
    public static byte [] createHandshakeMessage(String host, int port) throws IOException {
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
    
        DataOutputStream handshake = new DataOutputStream(buffer);
        handshake.writeByte(0x00); //packet id for handshake
        writeVarInt(handshake, 4); //protocol version
        writeString(handshake, host, StandardCharsets.UTF_8);
        handshake.writeShort(port); //port
        writeVarInt(handshake, 1); //state (1 for handshake)
    
        return buffer.toByteArray();
    }
    
    public static void writeString(DataOutputStream out, String string, Charset charset) throws IOException {
        byte [] bytes = string.getBytes(charset);
        writeVarInt(out, bytes.length);
        out.write(bytes);
    }
    
    public static void writeVarInt(DataOutputStream out, int paramInt) throws IOException {
        while (true) {
            if ((paramInt & 0xFFFFFF80) == 0) {
              out.writeByte(paramInt);
              return;
            }
    
            out.writeByte(paramInt & 0x7F | 0x80);
            paramInt >>>= 7;
        }
    }
    
    public static int readVarInt(DataInputStream in) throws IOException {
        int i = 0;
        int j = 0;
        while (true) {
            int k = in.readByte();
            i |= (k & 0x7F) << j++ * 7;
            if (j > 5) throw new RuntimeException("VarInt too big");
            if ((k & 0x80) != 128) break;
        }
        return i;
    }
    public static void sleep(int i) {
        try {
            Thread.sleep(i * 1000);
        } catch (InterruptedException ie) {}
    }
}
